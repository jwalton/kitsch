// Code generated by "genSchema --private CacheSettings CustomGetter"; DO NOT EDIT.

package getters

// cacheSettingsJSONSchema is the JSON schema for the CacheSettings struct.
var cacheSettingsJSONSchema = `{
  "type": "object",
  "properties": {
    "enabled": {"type": "boolean", "description": "Enabled is true if caching should be enabled for this getter.  At the moment, this only applied to getters with ` + "`" + `Type: \"custom\"` + "`" + `.  This makes it so we will cache the output of a command instead of re-running that command."}
  },
  "additionalProperties": false
}`

// customGetterJSONSchema is the JSON schema for the CustomGetter struct.
var customGetterJSONSchema = `{
  "type": "object",
  "properties": {
    "type": {"type": "string", "description": "Type is the type of getter.  One of \"custom\", \"file\", \"ancestorFile\", or \"env\".", "enum": ["custom", "file", "ancestorFile", "env"]},
    "from": {"type": "string", "description": "From is the source to get data from.  The meaning of \"From\" is based on the provided \"Type\"."},
    "as": {"type": "string", "description": "As will determine how to interpret the result of the getter.  One of \"text\", \"json\", \"toml\", or \"yaml\".", "enum": ["text", "json", "toml", "yaml"]},
    "valueTemplate": {"type": "string", "description": "ValueTemplate is a golang template used to parse values out of the result of the getter."},
    "regex": {"type": "string", "description": "Regex is a regular expression used to parse values out of the result of the getter.  If specified, then \"As\" and \"Template\" will be ignored."},
    "cache": {"$ref": "#/definitions/CacheSettings"}
  },
  "additionalProperties": false
}`

