package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/jwalton/kitsch-prompt/internal/kitsch/genSchema/gen"
)

// Generates JSON schema for one or more structures in a file.
//
// To use, add a `//go:generate go run ../genSchema/main.go [structName]`
// comment to the file where the struct is defined.  You can pass multiple
// structs.
//
// This is specialized for kitsch-prompt - in cases where a given struct is not
// supported, the schema can just be written by hand.
//
// See the README.md for more details.
//
func main() {
	filename := os.Getenv("GOFILE")
	inPackage := os.Getenv("GOPACKAGE")

	cwd, err := os.Getwd()
	if err != nil {
		panic(err)
	}
	sourcefile := filepath.Join(cwd, filename)

	pkgFlag := flag.String("pkg", "", "Output package")
	privateFlag := flag.Bool("private", false, "Generate private schema")
	flag.Parse()

	outDir := cwd
	if pkgFlag != nil && *pkgFlag != "" {
		outDir = filepath.Join(cwd, *pkgFlag)
		inPackage = *pkgFlag
	}

	structs := flag.Args()

	output := fmt.Sprintf(`// Code `+`generated by "genSchema %s"; DO NOT EDIT.`, strings.Join(os.Args[1:], " "))
	output += "\n\npackage " + inPackage + "\n\n"

	for _, structName := range structs {
		fmt.Println("Generating schema for " + structName)
		// TODO: perf: If there are multiple structs in the file, we'll parse the package multiple times.
		schema, err := gen.GenerateSchemaForStruct(sourcefile, structName)
		if err != nil {
			panic(err)
		}
		escapedSchema := strings.ReplaceAll(schema, "`", "` + \"`\" + `")

		schemaName := getSchemaVariableName(structName, *privateFlag)

		output += fmt.Sprintf("// %s is the JSON schema for the %s struct.\n", schemaName, structName)
		output += "var " + schemaName + " = `" + escapedSchema + "`\n\n"
	}

	ext := filepath.Ext(filename)
	outfilename := strings.TrimSuffix(filename, ext) + "_schema.go"

	err = os.MkdirAll(outDir, 0755)
	if err != nil {
		panic(err)
	}

	err = os.WriteFile(filepath.Join(outDir, outfilename), []byte(output), 0644)
	if err != nil {
		panic(err)
	}
}

func getSchemaVariableName(structName string, private bool) string {
	var varName string
	if private {
		varName = strings.ToLower(structName[0:1]) + structName[1:]
	} else {
		varName = strings.ToUpper(structName[0:1]) + structName[1:]
	}
	return varName + "JSONSchema"
}
