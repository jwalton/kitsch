// Package modules has modules which can generate parts of the kitsch prompt output.
//
// Each module produces some fragment of output which are assembled together into
// the final shell prompt.  For example the "username" module prints the name of the
// current user.  The "directory" module prints the current working directory.  The
// "block" module combines multiple modules together; it runs each child module
// in parallel, and then assembles up all the results.
//
// Because modules are intended to run in parallel, and because there are certain
// things that many different modules are all going to want to know (e.g. lots
// of programming-language oriented modules will want to know if files with
// a certain name or extension are present in the current folder), each module
// is passed an "env" object, which can be used to access information about the
// environment without duplicating effort (it would be silly if all the various
// programming language modules all read the contents of the current working
// directory - we only need to read it once).
//
package modules

import (
	"github.com/jwalton/kitsch/internal/kitsch/styling"
	"github.com/jwalton/kitsch/internal/perf"
)

// ModuleResult represents the output of a module.
type ModuleResult struct {
	// DefaultText contains the default text to display for the module.  Note that
	// this is the raw result directly from the module, so this will never have
	// a template applied to it.
	DefaultText string
	// Data contains any template data generated by the module.
	Data interface{}
	// StyleOverride can be used to override the default style for the module.
	StyleOverride string
	// Performance is an optional collection of performance data for individual
	// steps within the module.
	Performance *perf.Performance
	// StartStyle contains the foreground and background colors of the first
	// character in Text. Only modules that render multiple children need to
	// worry about filling this in - the wrapper will generate this from the
	// CommonConfig.Style or the StyleOverride.
	StartStyle styling.CharacterColors
	// EndStyle is similar to StartStyle, but contains the colors of the last
	// character in Text.
	EndStyle styling.CharacterColors
}

// Module represents a module that generates some output to show in the prompt.
type Module interface {
	// Execute will execute this module and return a ModuleResult.
	Execute(context *Context) ModuleResult
}

// defaultString returns value if it is non-empty, or def otherwise.
func defaultString(value string, def string) string {
	if value != "" {
		return value
	}
	return def
}
