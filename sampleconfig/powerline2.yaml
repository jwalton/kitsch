colors:
  $timeBg: "linear-gradient(#555, #222)"
  $timeFg: "#ccc"
  $directoryBg: "linear-gradient(#088 0px, #008 15px)"
  $directoryFg: "#cfc"
  $commandDurationBg: "linear-gradient(#221, #553)"
  $commandDurationFg: "#fd6"
  $gitFg: "#000"
  $gitBg: "#0fc"
  $gitBgAhead: "#ef3"
  $gitBgBehind: "#fb3"
  $gitFgNormal: "#000"
  $gitIndexBg: "#060"
  $gitUnstagedBg: "#600"
prompt:
  type: block
  modules:
    - type: time
    - type: directory
    - type: git
      style: $gitFg
      aheadStyle: $gitFg
      behindStyle: $gitFg
      aheadBehindStyle: $gitFg
    - type: git_status
      indexStyle: "#3f3"
      unstagedStyle: "#f33"
      unmergedStyle: "#f8f bold"
      stashStyle: "#f90 bold"
    - type: jobs
    - type: command_duration
      style: $commandDurationFg
  template: |
    {{- $pl := makePowerline " " "\ue0b0" " " -}}
    {{- $global := .Global -}}
    {{- with .Data.Modules -}}
      {{- printf " %s" .time.Text | style "$timeFg" | $pl.Segment "$timeBg" -}}
      {{- .directory.Text | style "$directoryFg" | $pl.Segment "$directoryBg" -}}
      {{- if .git -}}
        {{- $gitBg := or (and (gt .git.Data.Behind 0) "$gitBgBehind") (and (gt .git.Data.Ahead 0) "$gitBgAhead") "$gitBg" -}}
        {{- list "\ue0a0" .git.Text | join " " | style "$gitFg" | $pl.Segment $gitBg -}}
      {{- end -}}

      {{- /* Git */ -}}
      {{- with .git_status -}}
          {{- $gitStatusBg := "#444" -}}
          {{- if and (gt .Data.Index.Total 0) (gt .Data.Unstaged.Total 0) -}}
            {{- $gitStatusBg = "linear-gradient($gitIndexBg, $gitUnstagedBg)" -}}
          {{- else if gt .Data.Index.Total 0 -}}
            {{- $gitStatusBg = "$gitIndexBg" -}}
          {{- else if gt .Data.Unstaged.Total 0 -}}
            {{- $gitStatusBg = "$gitUnstagedBg" -}}
          {{- end -}}
          {{- .Text | style "#fff" | $pl.Segment $gitStatusBg -}}
      {{- end -}}
      {{- .command_duration.Text | $pl.Segment "$commandDurationBg" -}}

      {{- /* Jobs and Status */ -}}
      {{- if or (ne $global.Status 0) .jobs.Text -}}
        {{- $color := (ne $global.Status 0) | ternary "#b00" "#00b" -}}
        {{- $out := list .jobs.Text -}}
        {{- if (ne $global.Status 0) -}}
          {{- $out = mustAppend $out $global.Status -}}
        {{- end -}}
        {{- $out | join " " | style "#fff" | $pl.Segment $color -}}
      {{- end -}}
    {{- end -}}
    {{- $pl.Finish -}}{{- " " -}}
